// Generated by CoffeeScript 1.7.1
(function() {
  var Dot, StarryNight, colorsLib, deg360, dotsDistance;

  colorsLib = ['#F06292', '#F06292', '#BA68C8', '#64B5F6', '#4FC3F7', '#4DD0E1', '#81C784', '#FFB74D'];

  deg360 = Math.PI * 2;

  dotsDistance = function(dot1, dot2) {
    var x, y;
    x = dot1.x - dot2.x;
    y = dot1.y - dot2.y;
    return x * x + y * y;
  };

  Dot = (function() {
    function Dot(setting) {
      this.next = [];
      this.color = setting.color, this.x = setting.x, this.y = setting.y, this.size = setting.size, this.speedX = setting.speedX, this.speedY = setting.speedY;
    }

    return Dot;

  })();

  Dot.random = function(width, height) {
    var prop;
    prop = {
      color: colorsLib[parseInt(Math.random() * colorsLib.length)],
      x: parseInt(width * Math.random()),
      y: parseInt(height * Math.random()),
      size: 1 + 2 * Math.random() * (window.devicePixelRatio || 1),
      speedX: Math.random() * 0.01,
      speedY: Math.random() * 0.01
    };
    return new this(prop);
  };

  StarryNight = (function() {
    function StarryNight(canvas) {
      var _thisContext;
      this.canvas = canvas;
      this.context = canvas.getContext('2d');
      this.resize();
      this.dots = (function() {
        var _i, _results;
        _results = [];
        for (_i = 0; _i <= 100; _i++) {
          _results.push(Dot.random(this.width(), this.height()));
        }
        return _results;
      }).call(this);
      _thisContext = this;
      this.onAnimate = function(time, step) {
        return _thisContext._onanimate.call(_thisContext, time, step);
      };
    }

    StarryNight.prototype.width = function(w) {
      if (arguments.length) {
        this.canvas.width = w;
      }
      return this.canvas.width;
    };

    StarryNight.prototype.height = function(h) {
      if (arguments.length) {
        this.canvas.height = h;
      }
      return this.canvas.height;
    };

    StarryNight.prototype.drawDot = function(dot) {
      this.context.fillStyle = dot.color;
      this.context.shadowBlur = dot.size * 2;
      this.context.shadowColor = "#fff";
      this.context.beginPath();
      this.context.arc(dot.x, dot.y, dot.size, 0, deg360, true);
      this.context.fill();
      this.context.closePath();
    };

    StarryNight.prototype.drawDots = function(dots, before) {
      var dot, _i, _j, _len, _len1;
      if (!before) {
        for (_i = 0, _len = dots.length; _i < _len; _i++) {
          dot = dots[_i];
          this.drawDot(dot);
        }
      } else {
        for (_j = 0, _len1 = dots.length; _j < _len1; _j++) {
          dot = dots[_j];
          before(dot);
          this.drawDot(dot);
        }
      }
    };

    StarryNight.prototype.drawLine = function(x1, y1, x2, y2, color) {
      if (!color) {
        color = 'rgba(255, 255, 255, 0.1)';
      }
      this.context.strokeStyle = color;
      this.context.shadowBlur = 0;
      this.context.moveTo(x1, y1);
      this.context.lineTo(x2, y2);
      this.context.stroke();
      this.context.closePath();
    };

    StarryNight.prototype.clear = function() {
      this.context.clearRect(0, 0, this.width(), this.height());
    };

    StarryNight.prototype.relateDots = function(callback) {
      var distance, doti, dotj, i, j, maxDistance, _dotsLength, _i, _j, _nextLength, _nextLengthORG, _ref, _ref1, _ref2;
      maxDistance = this.width() * this.width() / 160;
      _dotsLength = this.dots.length;
      _nextLength = _nextLengthORG = 2;
      for (i = _i = 0, _ref = _dotsLength - 2; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (i > _dotsLength / 2 && _nextLengthORG === _nextLength) {
          _nextLength = _nextLength - 1;
        }
        doti = this.dots[i];
        if (!doti.next) {
          doti.next = [];
        }
        doti.next.length = 0;
        if (i === _dotsLength) {
          continue;
        }
        for (j = _j = _ref1 = i + 1, _ref2 = _dotsLength - 1; _ref1 <= _ref2 ? _j <= _ref2 : _j >= _ref2; j = _ref1 <= _ref2 ? ++_j : --_j) {
          dotj = this.dots[j];
          distance = dotsDistance(doti, dotj);
          if (distance < maxDistance) {
            if (!doti.next[_nextLength - 1] || dotsDistance(doti.next[_nextLength - 1], doti) > distance) {
              doti.next.unshift(dotj);
            }
          }
          if (doti.next.length > _nextLength) {
            doti.next.length = _nextLength;
          }
        }
        callback(doti);
      }
    };

    StarryNight.prototype.resize = function() {
      this.width(this.canvas.clientWidth * (window.devicePixelRatio || 1));
      this.height(this.canvas.clientHeight * (window.devicePixelRatio || 1));
    };

    StarryNight.prototype.play = function() {
      var _start, _this;
      if (this._timer) {
        return;
      }
      _this = this;
      _start = Date.now();
      this._timer = setInterval(function() {
        var _temp;
        _temp = Date.now();
        _this._onanimate(_temp - _start);
        return _start = _temp;
      }, 100);
      return console.log(this._timer);
    };

    StarryNight.prototype.pause = function() {
      clearInterval(this._timer);
      this._timer = null;
    };

    StarryNight.prototype._onanimate = function(step) {
      var dot, _i, _len, _ref;
      if (step > 500) {
        step = 30;
      }
      this.clear();
      _ref = this.dots;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dot = _ref[_i];
        dot.x = dot.x + dot.speedX * step;
        if (dot.x > this.width()) {
          dot.x = 0;
        }
        if (dot.x < 0) {
          dot.x = this.width();
        }
        dot.y = dot.y + dot.speedY * step;
        if (dot.y > this.height()) {
          dot.y = 0;
        }
        if (dot.y < 0) {
          dot.y = this.height();
        }
      }
      return this.relateDots((function(_this) {
        return function(dot) {
          var next, _j, _len1, _ref1, _results;
          _this.drawDot(dot);
          _ref1 = dot.next;
          _results = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            next = _ref1[_j];
            _results.push(_this.drawLine(dot.x, dot.y, next.x, next.y));
          }
          return _results;
        };
      })(this));
    };

    return StarryNight;

  })();

}).call(this);
